name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  MONGODB_VERSION: '7.0'
  REDIS_VERSION: '7'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_document_processing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng libtesseract-dev poppler-utils
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
    
    - name: Set up environment variables
      run: |
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "POSTGRES_SERVER=localhost" >> $GITHUB_ENV
        echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
        echo "POSTGRES_DB=test_document_processing" >> $GITHUB_ENV
        echo "MONGODB_URL=mongodb://admin:password@localhost:27017/test_document_storage?authSource=admin" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
    
    - name: Wait for services
      run: |
        sleep 10
        python -c "
        import time
        import psycopg2
        import pymongo
        import redis
        
        # Wait for PostgreSQL
        for i in range(30):
            try:
                conn = psycopg2.connect(host='localhost', database='test_document_processing', user='postgres', password='postgres')
                conn.close()
                print('PostgreSQL is ready')
                break
            except:
                time.sleep(1)
        
        # Wait for MongoDB
        for i in range(30):
            try:
                client = pymongo.MongoClient('mongodb://admin:password@localhost:27017/test_document_storage?authSource=admin')
                client.admin.command('ping')
                client.close()
                print('MongoDB is ready')
                break
            except:
                time.sleep(1)
        
        # Wait for Redis
        for i in range(30):
            try:
                r = redis.Redis(host='localhost', port=6379, db=0)
                r.ping()
                print('Redis is ready')
                break
            except:
                time.sleep(1)
        "
    
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check app
        isort --check-only app
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/document-processing-platform:latest
          ${{ secrets.DOCKER_USERNAME }}/document-processing-platform:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        # Add your deployment commands here
        # This could be deploying to AWS, GCP, Azure, or any other cloud provider
        echo "âœ… Deployment completed successfully"
